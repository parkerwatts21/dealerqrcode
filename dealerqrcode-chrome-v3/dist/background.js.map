{"version":3,"file":"background.js","sources":["../src/background.ts"],"sourcesContent":["// This will execute as soon as the background script loads\n(function initBackground() {\n  console.log('[DealerQR] Background script initialized');\n  \n  // Log when the extension is installed or updated\n  chrome.runtime.onInstalled.addListener((details) => {\n    console.log('[DealerQR] Extension installed/updated:', details.reason);\n  });\n  \n  // Listen for messages from content script\n  chrome.runtime.onMessage.addListener((message) => {\n    if (message.action === 'openPopup') {\n      chrome.windows.create({\n        url: chrome.runtime.getURL('popup.html'),\n        type: 'popup',\n        width: 600,\n        height: 800\n      });\n    }\n  });\n  \n  // Listen for extension icon clicks\n  chrome.action.onClicked.addListener(async (tab) => {\n    console.log('[DealerQR] Extension icon clicked');\n    \n    if (!tab.id) {\n      console.error('[DealerQR] No tab ID available');\n      return;\n    }\n\n    // Check if we can inject scripts into this tab\n    const url = tab.url || '';\n    if (!url || url.startsWith('chrome://') || url.startsWith('edge://') || url.startsWith('about:')) {\n      console.warn('[DealerQR] Cannot inject scripts into this page:', url);\n      return;\n    }\n\n    try {\n      // First try to send a message to see if content script is already there\n      console.log('[DealerQR] Attempting to message existing content script');\n      try {\n        await chrome.tabs.sendMessage(tab.id, { \n          action: 'ping'\n        });\n        console.log('[DealerQR] Content script already exists, sending toggle');\n        await chrome.tabs.sendMessage(tab.id, { action: 'toggleWidget' });\n      } catch (e) {\n        // Content script doesn't exist yet, inject it\n        console.log('[DealerQR] Content script not found, injecting...');\n        await chrome.scripting.executeScript({\n          target: { tabId: tab.id },\n          files: ['contentScript.js']\n        });\n        console.log('[DealerQR] Content script injected');\n        \n        // Wait a moment for the content script to initialize\n        setTimeout(async () => {\n          console.log('[DealerQR] Sending initial toggle message');\n          await chrome.tabs.sendMessage(tab.id!, { action: 'toggleWidget' });\n        }, 100);\n      }\n    } catch (error) {\n      console.error('[DealerQR] Error in background script:', error);\n    }\n  });\n})(); "],"names":[],"mappings":"CACC,SAAS,iBAAiB;AACzB,UAAQ,IAAI,0CAA0C;AAGtD,SAAO,QAAQ,YAAY,YAAY,CAAC,YAAY;AAC1C,YAAA,IAAI,2CAA2C,QAAQ,MAAM;AAAA,EAAA,CACtE;AAGD,SAAO,QAAQ,UAAU,YAAY,CAAC,YAAY;AAC5C,QAAA,QAAQ,WAAW,aAAa;AAClC,aAAO,QAAQ,OAAO;AAAA,QACpB,KAAK,OAAO,QAAQ,OAAO,YAAY;AAAA,QACvC,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MAAA,CACT;AAAA,IAAA;AAAA,EACH,CACD;AAGD,SAAO,OAAO,UAAU,YAAY,OAAO,QAAQ;AACjD,YAAQ,IAAI,mCAAmC;AAE3C,QAAA,CAAC,IAAI,IAAI;AACX,cAAQ,MAAM,gCAAgC;AAC9C;AAAA,IAAA;AAII,UAAA,MAAM,IAAI,OAAO;AACvB,QAAI,CAAC,OAAO,IAAI,WAAW,WAAW,KAAK,IAAI,WAAW,SAAS,KAAK,IAAI,WAAW,QAAQ,GAAG;AACxF,cAAA,KAAK,oDAAoD,GAAG;AACpE;AAAA,IAAA;AAGE,QAAA;AAEF,cAAQ,IAAI,0DAA0D;AAClE,UAAA;AACF,cAAM,OAAO,KAAK,YAAY,IAAI,IAAI;AAAA,UACpC,QAAQ;AAAA,QAAA,CACT;AACD,gBAAQ,IAAI,0DAA0D;AAChE,cAAA,OAAO,KAAK,YAAY,IAAI,IAAI,EAAE,QAAQ,gBAAgB;AAAA,eACzD,GAAG;AAEV,gBAAQ,IAAI,mDAAmD;AACzD,cAAA,OAAO,UAAU,cAAc;AAAA,UACnC,QAAQ,EAAE,OAAO,IAAI,GAAG;AAAA,UACxB,OAAO,CAAC,kBAAkB;AAAA,QAAA,CAC3B;AACD,gBAAQ,IAAI,oCAAoC;AAGhD,mBAAW,YAAY;AACrB,kBAAQ,IAAI,2CAA2C;AACjD,gBAAA,OAAO,KAAK,YAAY,IAAI,IAAK,EAAE,QAAQ,gBAAgB;AAAA,WAChE,GAAG;AAAA,MAAA;AAAA,aAED,OAAO;AACN,cAAA,MAAM,0CAA0C,KAAK;AAAA,IAAA;AAAA,EAC/D,CACD;AACH,GAAG;"}